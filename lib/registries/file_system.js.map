{
  "version": 3,
  "sources": ["../../src/registries/file_system.ts", "../../src/registries/file_system.ts"],
  "sourcesContent": ["import type {IURLObject} from \"../adapters\";\n\nimport type {\n    IFileSystemEntryResult,\n    IFileSystemEntryStats,\n    IFileSystemQueryOptions,\n    IFileSystemRemoveOptions,\n    IFileSystemWatchEvent,\n    IFileSystemWatchOptions,\n} from \"../overlays/file_system\";\nimport {FileSystemOverlay} from \"../overlays/file_system\";\n\nimport type {IEvent} from \"../util/event\";\n\nimport type {IJSONReplacer, IJSONReviver, IJSONValue} from \"../util/types\";\n\nimport {StorageRegistry} from \"./storage\";\n\nexport class FileSystemRegistry extends StorageRegistry<FileSystemOverlay> {\n    create_url_object(uri: string): Promise<IURLObject> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'create_url_object' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.create_url_object(path);\n    }\n\n    create_directory(uri: string): Promise<void> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'create_directory' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.create_directory(path);\n    }\n\n    exists(uri: string): Promise<boolean> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'exists' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.exists(path);\n    }\n\n    get_stats(uri: string): Promise<IFileSystemEntryStats> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'get_stats' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.get_stats(path);\n    }\n\n    read_directory(\n        namespace: string,\n        options: IFileSystemQueryOptions = {}\n    ): Promise<IFileSystemEntryResult[]> {\n        const node = this.get(namespace);\n        if (!node) {\n            throw new Error(\n                `bad argument #0 to 'read_directory' (could not resolve '${namespace}')`\n            );\n        }\n\n        const {storage} = node;\n        return storage.read_directory(options);\n    }\n\n    read_file(uri: string): Promise<Uint8Array> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'read_file' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.read_file(path);\n    }\n\n    remove_directory(uri: string, options: IFileSystemRemoveOptions = {}): Promise<boolean> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'remove_directory' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.remove_directory(path, options);\n    }\n\n    remove_file(uri: string): Promise<void> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'remove_file' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.remove_file(path);\n    }\n\n    watch_directory(\n        uri: string,\n        options: IFileSystemWatchOptions = {}\n    ): Promise<IEvent<IFileSystemWatchEvent>> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'watch_directory' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.watch_directory(path, options);\n    }\n\n    watch_file(uri: string): Promise<IEvent<IFileSystemWatchEvent>> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'watch_file' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.watch_file(path);\n    }\n\n    write_file(uri: string, payload: Uint8Array): Promise<void> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'write_file' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.write_file(path, payload);\n    }\n\n    read_file_json<T extends IJSONValue = IJSONValue>(\n        uri: string,\n        reviver?: IJSONReviver\n    ): Promise<T> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'read_file_json' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.read_file_json(path, reviver);\n    }\n\n    read_file_text(uri: string): Promise<string> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'read_file_text' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.read_file_text(path);\n    }\n\n    write_file_json<T extends IJSONValue = IJSONValue>(\n        uri: string,\n        value: T,\n        replacer?: IJSONReplacer,\n        space?: number | string\n    ): Promise<void> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'write_file_json' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.write_file_json(path, value, replacer, space);\n    }\n\n    write_file_text(uri: string, text: string): Promise<void> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'write_file_text' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.write_file_text(path, text);\n    }\n}\n", "import type {IURLObject} from \"../adapters\";\n\nimport type {\n    IFileSystemEntryResult,\n    IFileSystemEntryStats,\n    IFileSystemQueryOptions,\n    IFileSystemRemoveOptions,\n    IFileSystemWatchEvent,\n    IFileSystemWatchOptions,\n} from \"../overlays/file_system\";\nimport {FileSystemOverlay} from \"../overlays/file_system\";\n\nimport type {IEvent} from \"../util/event\";\n\nimport type {IJSONReplacer, IJSONReviver, IJSONValue} from \"../util/types\";\n\nimport {StorageRegistry} from \"./storage\";\n\nexport class FileSystemRegistry extends StorageRegistry<FileSystemOverlay> {\n    create_url_object(uri: string): Promise<IURLObject> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'create_url_object' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.create_url_object(path);\n    }\n\n    create_directory(uri: string): Promise<void> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'create_directory' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.create_directory(path);\n    }\n\n    exists(uri: string): Promise<boolean> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'exists' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.exists(path);\n    }\n\n    get_stats(uri: string): Promise<IFileSystemEntryStats> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'get_stats' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.get_stats(path);\n    }\n\n    read_directory(\n        namespace: string,\n        options: IFileSystemQueryOptions = {}\n    ): Promise<IFileSystemEntryResult[]> {\n        const node = this.get(namespace);\n        if (!node) {\n            throw new Error(\n                `bad argument #0 to 'read_directory' (could not resolve '${namespace}')`\n            );\n        }\n\n        const {storage} = node;\n        return storage.read_directory(options);\n    }\n\n    read_file(uri: string): Promise<Uint8Array> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'read_file' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.read_file(path);\n    }\n\n    remove_directory(uri: string, options: IFileSystemRemoveOptions = {}): Promise<boolean> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'remove_directory' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.remove_directory(path, options);\n    }\n\n    remove_file(uri: string): Promise<void> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'remove_file' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.remove_file(path);\n    }\n\n    watch_directory(\n        uri: string,\n        options: IFileSystemWatchOptions = {}\n    ): Promise<IEvent<IFileSystemWatchEvent>> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'watch_directory' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.watch_directory(path, options);\n    }\n\n    watch_file(uri: string): Promise<IEvent<IFileSystemWatchEvent>> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'watch_file' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.watch_file(path);\n    }\n\n    write_file(uri: string, payload: Uint8Array): Promise<void> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'write_file' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.write_file(path, payload);\n    }\n\n    read_file_json<T extends IJSONValue = IJSONValue>(\n        uri: string,\n        reviver?: IJSONReviver\n    ): Promise<T> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'read_file_json' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.read_file_json(path, reviver);\n    }\n\n    read_file_text(uri: string): Promise<string> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'read_file_text' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.read_file_text(path);\n    }\n\n    write_file_json<T extends IJSONValue = IJSONValue>(\n        uri: string,\n        value: T,\n        replacer?: IJSONReplacer,\n        space?: number | string\n    ): Promise<void> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'write_file_json' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.write_file_json(path, value, replacer, space);\n    }\n\n    write_file_text(uri: string, text: string): Promise<void> {\n        const result = this.resolve(uri);\n        if (!result) {\n            throw new Error(`bad argument #0 to 'write_file_text' (could not resolve '${uri}')`);\n        }\n\n        const {path, storage} = result;\n        return storage.write_file_text(path, text);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
