{
  "version": 3,
  "sources": ["../../src/vendor/path-browserify.js"],
  "sourcesContent": ["// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\"use strict\";\n\nfunction assertPath(path) {\n    if (typeof path !== \"string\") {\n        throw new TypeError(\"Path must be a string. Received \" + JSON.stringify(path));\n    }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n    var res = \"\";\n    var lastSegmentLength = 0;\n    var lastSlash = -1;\n    var dots = 0;\n    var code;\n    for (var i = 0; i <= path.length; ++i) {\n        if (i < path.length) code = path.charCodeAt(i);\n        else if (code === 47 /*/*/) break;\n        else code = 47 /*/*/;\n        if (code === 47 /*/*/) {\n            if (lastSlash === i - 1 || dots === 1) {\n                // NOOP\n            } else if (lastSlash !== i - 1 && dots === 2) {\n                if (\n                    res.length < 2 ||\n                    lastSegmentLength !== 2 ||\n                    res.charCodeAt(res.length - 1) !== 46 /*.*/ ||\n                    res.charCodeAt(res.length - 2) !== 46 /*.*/\n                ) {\n                    if (res.length > 2) {\n                        var lastSlashIndex = res.lastIndexOf(\"/\");\n                        if (lastSlashIndex !== res.length - 1) {\n                            if (lastSlashIndex === -1) {\n                                res = \"\";\n                                lastSegmentLength = 0;\n                            } else {\n                                res = res.slice(0, lastSlashIndex);\n                                lastSegmentLength = res.length - 1 - res.lastIndexOf(\"/\");\n                            }\n                            lastSlash = i;\n                            dots = 0;\n                            continue;\n                        }\n                    } else if (res.length === 2 || res.length === 1) {\n                        res = \"\";\n                        lastSegmentLength = 0;\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot) {\n                    if (res.length > 0) res += \"/..\";\n                    else res = \"..\";\n                    lastSegmentLength = 2;\n                }\n            } else {\n                if (res.length > 0) res += \"/\" + path.slice(lastSlash + 1, i);\n                else res = path.slice(lastSlash + 1, i);\n                lastSegmentLength = i - lastSlash - 1;\n            }\n            lastSlash = i;\n            dots = 0;\n        } else if (code === 46 /*.*/ && dots !== -1) {\n            ++dots;\n        } else {\n            dots = -1;\n        }\n    }\n    return res;\n}\n\nfunction _format(sep, pathObject) {\n    var dir = pathObject.dir || pathObject.root;\n    var base = pathObject.base || (pathObject.name || \"\") + (pathObject.ext || \"\");\n    if (!dir) {\n        return base;\n    }\n    if (dir === pathObject.root) {\n        return dir + base;\n    }\n    return dir + sep + base;\n}\n\n// path.resolve([from ...], to)\nexport function resolve() {\n    var resolvedPath = \"\";\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n        var path;\n        if (i >= 0) path = arguments[i];\n        else {\n            if (cwd === undefined) cwd = \"/\";\n            path = cwd;\n        }\n\n        assertPath(path);\n\n        // Skip empty entries\n        if (path.length === 0) {\n            continue;\n        }\n\n        resolvedPath = path + \"/\" + resolvedPath;\n        resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n        if (resolvedPath.length > 0) return \"/\" + resolvedPath;\n        else return \"/\";\n    } else if (resolvedPath.length > 0) {\n        return resolvedPath;\n    } else {\n        return \".\";\n    }\n}\n\nexport function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return \".\";\n\n    var isAbsolute = path.charCodeAt(0) === 47; /*/*/\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47; /*/*/\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = \".\";\n    if (path.length > 0 && trailingSeparator) path += \"/\";\n\n    if (isAbsolute) return \"/\" + path;\n    return path;\n}\n\nexport function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n}\n\nexport function join() {\n    if (arguments.length === 0) return \".\";\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n        var arg = arguments[i];\n        assertPath(arg);\n        if (arg.length > 0) {\n            if (joined === undefined) joined = arg;\n            else joined += \"/\" + arg;\n        }\n    }\n    if (joined === undefined) return \".\";\n    return posix.normalize(joined);\n}\n\nexport function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return \"\";\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return \"\";\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n        if (from.charCodeAt(fromStart) !== 47 /*/*/) break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n        if (to.charCodeAt(toStart) !== 47 /*/*/) break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n        if (i === length) {\n            if (toLen > length) {\n                if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n                    // We get here if `from` is the exact base path for `to`.\n                    // For example: from='/foo/bar'; to='/foo/bar/baz'\n                    return to.slice(toStart + i + 1);\n                } else if (i === 0) {\n                    // We get here if `from` is the root\n                    // For example: from='/'; to='/foo'\n                    return to.slice(toStart + i);\n                }\n            } else if (fromLen > length) {\n                if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n                    // We get here if `to` is the exact base path for `from`.\n                    // For example: from='/foo/bar/baz'; to='/foo/bar'\n                    lastCommonSep = i;\n                } else if (i === 0) {\n                    // We get here if `to` is the root.\n                    // For example: from='/foo'; to='/'\n                    lastCommonSep = 0;\n                }\n            }\n            break;\n        }\n        var fromCode = from.charCodeAt(fromStart + i);\n        var toCode = to.charCodeAt(toStart + i);\n        if (fromCode !== toCode) break;\n        else if (fromCode === 47 /*/*/) lastCommonSep = i;\n    }\n\n    var out = \"\";\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n        if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n            if (out.length === 0) out += \"..\";\n            else out += \"/..\";\n        }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);\n    else {\n        toStart += lastCommonSep;\n        if (to.charCodeAt(toStart) === 47 /*/*/) ++toStart;\n        return to.slice(toStart);\n    }\n}\n\nexport function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return \".\";\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47; /*/*/\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n        code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            if (!matchedSlash) {\n                end = i;\n                break;\n            }\n        } else {\n            // We saw the first non-path separator\n            matchedSlash = false;\n        }\n    }\n\n    if (end === -1) return hasRoot ? \"/\" : \".\";\n    if (hasRoot && end === 1) return \"//\";\n    return path.slice(0, end);\n}\n\nexport function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== \"string\")\n        throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n        if (ext.length === path.length && ext === path) return \"\";\n        var extIdx = ext.length - 1;\n        var firstNonSlashEnd = -1;\n        for (i = path.length - 1; i >= 0; --i) {\n            var code = path.charCodeAt(i);\n            if (code === 47 /*/*/) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                }\n            } else {\n                if (firstNonSlashEnd === -1) {\n                    // We saw the first non-path separator, remember this index in case\n                    // we need it if the extension ends up not matching\n                    matchedSlash = false;\n                    firstNonSlashEnd = i + 1;\n                }\n                if (extIdx >= 0) {\n                    // Try to match the explicit extension\n                    if (code === ext.charCodeAt(extIdx)) {\n                        if (--extIdx === -1) {\n                            // We matched the extension, so mark this as the end of our path\n                            // component\n                            end = i;\n                        }\n                    } else {\n                        // Extension does not match, so our result is the entire path\n                        // component\n                        extIdx = -1;\n                        end = firstNonSlashEnd;\n                    }\n                }\n            }\n        }\n\n        if (start === end) end = firstNonSlashEnd;\n        else if (end === -1) end = path.length;\n        return path.slice(start, end);\n    } else {\n        for (i = path.length - 1; i >= 0; --i) {\n            if (path.charCodeAt(i) === 47 /*/*/) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                }\n            } else if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n\n        if (end === -1) return \"\";\n        return path.slice(start, end);\n    }\n}\n\nexport function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n                startPart = i + 1;\n                break;\n            }\n            continue;\n        }\n        if (end === -1) {\n            // We saw the first non-path separator, mark this as the end of our\n            // extension\n            matchedSlash = false;\n            end = i + 1;\n        }\n        if (code === 46 /*.*/) {\n            // If this is our first dot, mark it as the start of our extension\n            if (startDot === -1) startDot = i;\n            else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n            // We saw a non-dot and non-path separator before our dot, so we should\n            // have a good chance at having a non-empty extension\n            preDotState = -1;\n        }\n    }\n\n    if (\n        startDot === -1 ||\n        end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n    ) {\n        return \"\";\n    }\n    return path.slice(startDot, end);\n}\n\nexport function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== \"object\") {\n        throw new TypeError(\n            'The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject\n        );\n    }\n    return _format(\"/\", pathObject);\n}\n\nexport function parse(path) {\n    assertPath(path);\n\n    var ret = {root: \"\", dir: \"\", base: \"\", ext: \"\", name: \"\"};\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47; /*/*/\n    var start;\n    if (isAbsolute) {\n        ret.root = \"/\";\n        start = 1;\n    } else {\n        start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n        code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n                startPart = i + 1;\n                break;\n            }\n            continue;\n        }\n        if (end === -1) {\n            // We saw the first non-path separator, mark this as the end of our\n            // extension\n            matchedSlash = false;\n            end = i + 1;\n        }\n        if (code === 46 /*.*/) {\n            // If this is our first dot, mark it as the start of our extension\n            if (startDot === -1) startDot = i;\n            else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n            // We saw a non-dot and non-path separator before our dot, so we should\n            // have a good chance at having a non-empty extension\n            preDotState = -1;\n        }\n    }\n\n    if (\n        startDot === -1 ||\n        end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n    ) {\n        if (end !== -1) {\n            if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);\n            else ret.base = ret.name = path.slice(startPart, end);\n        }\n    } else {\n        if (startPart === 0 && isAbsolute) {\n            ret.name = path.slice(1, startDot);\n            ret.base = path.slice(1, end);\n        } else {\n            ret.name = path.slice(startPart, startDot);\n            ret.base = path.slice(startPart, end);\n        }\n        ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);\n    else if (isAbsolute) ret.dir = \"/\";\n\n    return ret;\n}\n\nexport const sep = \"/\";\nexport const delimiter = \":\";\n"],
  "mappings": ";AA0BA,oBAAoB;AAChB,MAAI,OAAO,SAAS;AAChB,UAAM,IAAI,UAAU,qCAAqC,KAAK,UAAU;AAAA;AAAA;AAKhF;AACI,YAAU;AACV,0BAAwB;AACxB,kBAAgB;AAChB,aAAW;AACX;AACA,eAAa,GAAG,KAAK,KAAK,QAAQ,EAAE;AAChC,QAAI,IAAI,KAAK;AAAQ,aAAO,KAAK,WAAW;AAAA,aACnC,SAAS;AAAU;AAAA;AACvB,aAAO;AACZ,QAAI,SAAS;AACT,UAAI,cAAc,IAAI,KAAK,SAAS;AAAA,iBAEzB,cAAc,IAAI,KAAK,SAAS;AACvC,YACI,IAAI,SAAS,KACb,sBAAsB,KACtB,IAAI,WAAW,IAAI,SAAS,OAAO,MACnC,IAAI,WAAW,IAAI,SAAS,OAAO;AAEnC,cAAI,IAAI,SAAS;AACb,iCAAqB,IAAI,YAAY;AACrC,gBAAI,mBAAmB,IAAI,SAAS;AAChC,kBAAI,mBAAmB;AACnB,sBAAM;AACN,oCAAoB;AAAA;AAEpB,sBAAM,IAAI,MAAM,GAAG;AACnB,oCAAoB,IAAI,SAAS,IAAI,IAAI,YAAY;AAAA;AAEzD,0BAAY;AACZ,qBAAO;AACP;AAAA;AAAA,qBAEG,IAAI,WAAW,KAAK,IAAI,WAAW;AAC1C,kBAAM;AACN,gCAAoB;AACpB,wBAAY;AACZ,mBAAO;AACP;AAAA;AAAA;AAGR,YAAI;AACA,cAAI,IAAI,SAAS;AAAG,mBAAO;AAAA;AACtB,kBAAM;AACX,8BAAoB;AAAA;AAAA;AAGxB,YAAI,IAAI,SAAS;AAAG,iBAAO,MAAM,KAAK,MAAM,YAAY,GAAG;AAAA;AACtD,gBAAM,KAAK,MAAM,YAAY,GAAG;AACrC,4BAAoB,IAAI,YAAY;AAAA;AAExC,kBAAY;AACZ,aAAO;AAAA,eACA,SAAS,MAAY,SAAS;AACrC,QAAE;AAAA;AAEF,aAAO;AAAA;AAAA;AAGf,SAAO;AAAA;AAGX;AACI,YAAU,WAAW,OAAO,WAAW;AACvC,aAAW,WAAW,QAAS,YAAW,QAAQ,MAAO,YAAW,OAAO;AAC3E,MAAI,CAAC;AACD,WAAO;AAAA;AAEX,MAAI,QAAQ,WAAW;AACnB,WAAO,MAAM;AAAA;AAEjB,SAAO,MAAM,OAAM;AAAA;AAIhB;AACH,qBAAmB;AACnB,yBAAuB;AACvB;AAEA,eAAa,UAAU,SAAS,GAAG,KAAK,MAAM,CAAC,kBAAkB;AAC7D;AACA,QAAI,KAAK;AAAG,aAAO,UAAU;AAAA;AAEzB,UAAI,QAAQ;AAAW,cAAM;AAC7B,aAAO;AAAA;AAGX,eAAW;AAGX,QAAI,KAAK,WAAW;AAChB;AAAA;AAGJ,mBAAe,OAAO,MAAM;AAC5B,uBAAmB,KAAK,WAAW,OAAO;AAAA;AAO9C,iBAAe,qBAAqB,cAAc,CAAC;AAEnD,MAAI;AACA,QAAI,aAAa,SAAS;AAAG,aAAO,MAAM;AAAA;AACrC,aAAO;AAAA,aACL,aAAa,SAAS;AAC7B,WAAO;AAAA;AAEP,WAAO;AAAA;AAAA;AAIR;AACH,aAAW;AAEX,MAAI,KAAK,WAAW;AAAG,WAAO;AAE9B,oBAAiB,KAAK,WAAW,OAAO;AACxC,0BAAwB,KAAK,WAAW,KAAK,SAAS,OAAO;AAG7D,SAAO,qBAAqB,MAAM,CAAC;AAEnC,MAAI,KAAK,WAAW,KAAK,CAAC;AAAY,WAAO;AAC7C,MAAI,KAAK,SAAS,KAAK;AAAmB,YAAQ;AAElD,MAAI;AAAY,WAAO,MAAM;AAC7B,SAAO;AAAA;AAGJ;AACH,aAAW;AACX,SAAO,KAAK,SAAS,KAAK,KAAK,WAAW,OAAO;AAAA;AAG9C;AACH,MAAI,UAAU,WAAW;AAAG,WAAO;AACnC;AACA,eAAa,GAAG,IAAI,UAAU,QAAQ,EAAE;AACpC,cAAU,UAAU;AACpB,eAAW;AACX,QAAI,IAAI,SAAS;AACb,UAAI,WAAW;AAAW,iBAAS;AAAA;AAC9B,kBAAU,MAAM;AAAA;AAAA;AAG7B,MAAI,WAAW;AAAW,WAAO;AACjC,SAAO,MAAM,UAAU;AAAA;AAGpB;AACH,aAAW;AACX,aAAW;AAEX,MAAI,SAAS;AAAI,WAAO;AAExB,SAAO,MAAM,QAAQ;AACrB,OAAK,MAAM,QAAQ;AAEnB,MAAI,SAAS;AAAI,WAAO;AAGxB,kBAAgB;AAChB,SAAO,YAAY,KAAK,QAAQ,EAAE;AAC9B,QAAI,KAAK,WAAW,eAAe;AAAU;AAAA;AAEjD,gBAAc,KAAK;AACnB,gBAAc,UAAU;AAGxB,gBAAc;AACd,SAAO,UAAU,GAAG,QAAQ,EAAE;AAC1B,QAAI,GAAG,WAAW,aAAa;AAAU;AAAA;AAE7C,cAAY,GAAG;AACf,cAAY,QAAQ;AAGpB,eAAa,UAAU,QAAQ,UAAU;AACzC,sBAAoB;AACpB,UAAQ;AACR,SAAO,KAAK,QAAQ,EAAE;AAClB,QAAI,MAAM;AACN,UAAI,QAAQ;AACR,YAAI,GAAG,WAAW,UAAU,OAAO;AAG/B,iBAAO,GAAG,MAAM,UAAU,IAAI;AAAA,mBACvB,MAAM;AAGb,iBAAO,GAAG,MAAM,UAAU;AAAA;AAAA,iBAEvB,UAAU;AACjB,YAAI,KAAK,WAAW,YAAY,OAAO;AAGnC,0BAAgB;AAAA,mBACT,MAAM;AAGb,0BAAgB;AAAA;AAAA;AAGxB;AAAA;AAEJ,mBAAe,KAAK,WAAW,YAAY;AAC3C,iBAAa,GAAG,WAAW,UAAU;AACrC,QAAI,aAAa;AAAQ;AAAA,aAChB,aAAa;AAAU,sBAAgB;AAAA;AAGpD,YAAU;AAGV,OAAK,IAAI,YAAY,gBAAgB,GAAG,KAAK,SAAS,EAAE;AACpD,QAAI,MAAM,WAAW,KAAK,WAAW,OAAO;AACxC,UAAI,IAAI,WAAW;AAAG,eAAO;AAAA;AACxB,eAAO;AAAA;AAAA;AAMpB,MAAI,IAAI,SAAS;AAAG,WAAO,MAAM,GAAG,MAAM,UAAU;AAAA;AAEhD,eAAW;AACX,QAAI,GAAG,WAAW,aAAa;AAAU,QAAE;AAC3C,WAAO,GAAG,MAAM;AAAA;AAAA;AAIjB;AACH,aAAW;AACX,MAAI,KAAK,WAAW;AAAG,WAAO;AAC9B,aAAW,KAAK,WAAW;AAC3B,gBAAc,SAAS;AACvB,YAAU;AACV,qBAAmB;AACnB,eAAa,KAAK,SAAS,GAAG,KAAK,GAAG,EAAE;AACpC,WAAO,KAAK,WAAW;AACvB,QAAI,SAAS;AACT,UAAI,CAAC;AACD,cAAM;AACN;AAAA;AAAA;AAIJ,qBAAe;AAAA;AAAA;AAIvB,MAAI,QAAQ;AAAI,WAAO,UAAU,MAAM;AACvC,MAAI,WAAW,QAAQ;AAAG,WAAO;AACjC,SAAO,KAAK,MAAM,GAAG;AAAA;AAGlB;AACH,MAAI,QAAQ,UAAa,OAAO,QAAQ;AACpC,UAAM,IAAI,UAAU;AACxB,aAAW;AAEX,cAAY;AACZ,YAAU;AACV,qBAAmB;AACnB;AAEA,MAAI,QAAQ,UAAa,IAAI,SAAS,KAAK,IAAI,UAAU,KAAK;AAC1D,QAAI,IAAI,WAAW,KAAK,UAAU,QAAQ;AAAM,aAAO;AACvD,iBAAa,IAAI,SAAS;AAC1B,2BAAuB;AACvB,SAAK,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,EAAE;AAChC,iBAAW,KAAK,WAAW;AAC3B,UAAI,SAAS;AAGT,YAAI,CAAC;AACD,kBAAQ,IAAI;AACZ;AAAA;AAAA;AAGJ,YAAI,qBAAqB;AAGrB,yBAAe;AACf,6BAAmB,IAAI;AAAA;AAE3B,YAAI,UAAU;AAEV,cAAI,SAAS,IAAI,WAAW;AACxB,gBAAI,EAAE,WAAW;AAGb,oBAAM;AAAA;AAAA;AAKV,qBAAS;AACT,kBAAM;AAAA;AAAA;AAAA;AAAA;AAMtB,QAAI,UAAU;AAAK,YAAM;AAAA,aAChB,QAAQ;AAAI,YAAM,KAAK;AAChC,WAAO,KAAK,MAAM,OAAO;AAAA;AAEzB,SAAK,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,EAAE;AAChC,UAAI,KAAK,WAAW,OAAO;AAGvB,YAAI,CAAC;AACD,kBAAQ,IAAI;AACZ;AAAA;AAAA,iBAEG,QAAQ;AAGf,uBAAe;AACf,cAAM,IAAI;AAAA;AAAA;AAIlB,QAAI,QAAQ;AAAI,aAAO;AACvB,WAAO,KAAK,MAAM,OAAO;AAAA;AAAA;AAI1B;AACH,aAAW;AACX,iBAAe;AACf,kBAAgB;AAChB,YAAU;AACV,qBAAmB;AAGnB,oBAAkB;AAClB,eAAa,KAAK,SAAS,GAAG,KAAK,GAAG,EAAE;AACpC,eAAW,KAAK,WAAW;AAC3B,QAAI,SAAS;AAGT,UAAI,CAAC;AACD,oBAAY,IAAI;AAChB;AAAA;AAEJ;AAAA;AAEJ,QAAI,QAAQ;AAGR,qBAAe;AACf,YAAM,IAAI;AAAA;AAEd,QAAI,SAAS;AAET,UAAI,aAAa;AAAI,mBAAW;AAAA,eACvB,gBAAgB;AAAG,sBAAc;AAAA,eACnC,aAAa;AAGpB,oBAAc;AAAA;AAAA;AAItB,MACI,aAAa,MACb,QAAQ,MAER,gBAAgB,KAEf,gBAAgB,KAAK,aAAa,MAAM,KAAK,aAAa,YAAY;AAEvE,WAAO;AAAA;AAEX,SAAO,KAAK,MAAM,UAAU;AAAA;AAGzB;AACH,MAAI,eAAe,QAAQ,OAAO,eAAe;AAC7C,UAAM,IAAI,UACN,qEAAqE,OAAO;AAAA;AAGpF,SAAO,QAAQ,KAAK;AAAA;AAGjB;AACH,aAAW;AAEX,YAAU,CAAC,MAAM,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM;AACvD,MAAI,KAAK,WAAW;AAAG,WAAO;AAC9B,aAAW,KAAK,WAAW;AAC3B,oBAAiB,SAAS;AAC1B;AACA,MAAI;AACA,QAAI,OAAO;AACX,YAAQ;AAAA;AAER,YAAQ;AAAA;AAEZ,iBAAe;AACf,kBAAgB;AAChB,YAAU;AACV,qBAAmB;AACnB,UAAQ,KAAK,SAAS;AAItB,oBAAkB;AAGlB,SAAO,KAAK,OAAO,EAAE;AACjB,WAAO,KAAK,WAAW;AACvB,QAAI,SAAS;AAGT,UAAI,CAAC;AACD,oBAAY,IAAI;AAChB;AAAA;AAEJ;AAAA;AAEJ,QAAI,QAAQ;AAGR,qBAAe;AACf,YAAM,IAAI;AAAA;AAEd,QAAI,SAAS;AAET,UAAI,aAAa;AAAI,mBAAW;AAAA,eACvB,gBAAgB;AAAG,sBAAc;AAAA,eACnC,aAAa;AAGpB,oBAAc;AAAA;AAAA;AAItB,MACI,aAAa,MACb,QAAQ,MAER,gBAAgB,KAEf,gBAAgB,KAAK,aAAa,MAAM,KAAK,aAAa,YAAY;AAEvE,QAAI,QAAQ;AACR,UAAI,cAAc,KAAK;AAAY,YAAI,OAAO,IAAI,OAAO,KAAK,MAAM,GAAG;AAAA;AAClE,YAAI,OAAO,IAAI,OAAO,KAAK,MAAM,WAAW;AAAA;AAAA;AAGrD,QAAI,cAAc,KAAK;AACnB,UAAI,OAAO,KAAK,MAAM,GAAG;AACzB,UAAI,OAAO,KAAK,MAAM,GAAG;AAAA;AAEzB,UAAI,OAAO,KAAK,MAAM,WAAW;AACjC,UAAI,OAAO,KAAK,MAAM,WAAW;AAAA;AAErC,QAAI,MAAM,KAAK,MAAM,UAAU;AAAA;AAGnC,MAAI,YAAY;AAAG,QAAI,MAAM,KAAK,MAAM,GAAG,YAAY;AAAA,WAC9C;AAAY,QAAI,MAAM;AAE/B,SAAO;AAAA;AAGJ,YAAY;AACZ,kBAAkB;",
  "names": []
}
