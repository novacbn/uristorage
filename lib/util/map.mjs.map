{
  "version": 3,
  "sources": ["../../src/util/map.ts"],
  "sourcesContent": ["export class ImmutableMap<T> extends Map<string, T> {\n    clone = (value: T): T => {\n        throw new Error(\"bad dispatch to 'clone' (not implemented)\");\n    };\n\n    entries(): IterableIterator<[string, T]> {\n        const {clone} = this;\n\n        let entries = Array.from(super.entries());\n        entries = entries.map(([key, value], index) => [key, clone(value)]);\n\n        return entries[Symbol.iterator]();\n    }\n\n    forEach(callback: (value: T, key: string, map: Map<string, T>) => void, thisArg?: any): void {\n        for (const entry of this) {\n            const [key, value] = entry;\n\n            callback.call(thisArg, this.clone(value), key, this);\n        }\n    }\n\n    get(key: string): T | undefined {\n        const value = super.get(key);\n\n        if (value !== undefined) return this.clone(value);\n    }\n\n    set(key: string, value: T): this {\n        value = this.clone(value);\n\n        super.set(key, value);\n        return this;\n    }\n\n    values(): IterableIterator<T> {\n        let values = Array.from(super.values());\n        values = values.map((value, index) => this.clone(value));\n\n        return values[Symbol.iterator]();\n    }\n}\n"],
  "mappings": "AAAA,2BAAqC;AAAA,EAArC;AAAA;AACI,iBAAQ,CAAC;AACL,YAAM,IAAI,MAAM;AAAA;AAAA;AAAA,EAGpB;AACI,WAAO,SAAS;AAEhB,kBAAc,MAAM,KAAK,MAAM;AAC/B,cAAU,QAAQ,IAAI,yBAAyB,CAAC,KAAK,MAAM;AAE3D,WAAO,QAAQ,OAAO;AAAA;AAAA,EAG1B;AACI,wBAAoB;AAChB,2BAAqB;AAErB,eAAS,KAAK,SAAS,KAAK,MAAM,QAAQ,KAAK;AAAA;AAAA;AAAA,EAIvD;AACI,kBAAc,MAAM,IAAI;AAExB,QAAI,UAAU;AAAW,aAAO,KAAK,MAAM;AAAA;AAAA,EAG/C;AACI,YAAQ,KAAK,MAAM;AAEnB,UAAM,IAAI,KAAK;AACf,WAAO;AAAA;AAAA,EAGX;AACI,iBAAa,MAAM,KAAK,MAAM;AAC9B,aAAS,OAAO,IAAI,kBAAkB,KAAK,MAAM;AAEjD,WAAO,OAAO,OAAO;AAAA;AAAA;",
  "names": []
}
