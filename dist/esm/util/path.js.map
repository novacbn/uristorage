{
  "version": 3,
  "sources": ["../../../src/util/path.ts"],
  "sourcesContent": ["// @ts-ignore\nimport * as _path from \"path-browserify\";\n\n// NOTE: Abstracted for backend / package changes while remaining API-compatible\n\n// NOTE: Types pulled from https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/node/path.d.ts\n\n/**\n * Represents the Regular Expression used to reduce trailing separators\n *\n * @internal\n */\nconst REGEX_TRAILING_SLASH = /[\\/]*$/;\n\n/**\n * The platform-specific file delimiter. Always ':'.\n */\nexport const delimiter: string = _path.delimiter;\n\n/**\n * The platform-specific file separator. Always '/'.\n */\nexport const sep: string = _path.sep;\n\n/**\n * Return the last portion of a path. Similar to the Unix basename command.\n * Often used to extract the file name from a fully qualified path.\n *\n * @param p\n * @param ext\n */\nexport const basename: (p: string, ext?: string) => string = _path.basename;\n\n/**\n * Return the extension of the path, from the last '.' to end of string in the last portion of the path.\n * If there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string\n *\n * @param p\n */\nexport const extname: (path: string) => string = _path.extname;\n\n/**\n * Join all arguments together and normalize the resulting path.\n *\n * @param paths\n */\nexport const join: (...paths: string[]) => string = _path.join;\n\n/**\n * Solve the relative path from {from} to {to}.\n * At times we have two absolute paths, and we need to derive the relative path from one to the other. This is actually the reverse transform of path.resolve.\n * @param from\n * @param to\n */\nexport const relative: (from: string, to: string) => string = _path.relative;\n\n/**\n * The right-most parameter is considered {to}.  Other parameters are considered an array of {from}.\n *\n * Starting from leftmost {from} parameter, resolves {to} to an absolute path.\n *\n * If {to} isn't already absolute, {from} arguments are prepended in right to left order,\n * until an absolute path is found. If after using all {from} paths still no absolute path is found,\n * the current working directory is used as well. The resulting path is normalized,\n * and trailing slashes are removed unless the path gets resolved to the root directory.\n *\n * @param pathSegments\n */\nexport const resolve: (...pathSegments: string[]) => string = _path.resolve;\n\n/**\n * Return the directory name of a path. Similar to the Unix dirname command.\n *\n * @param p\n */\nexport function dirname(p: string): string {\n    p = _path.dirname(p);\n\n    return p === \".\" ? sep : p;\n}\n\n/**\n * Normalize a string path, reducing '..' and '.' parts.\n * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved.\n * When the path is normalized to a single `.` part, the platform seperator is returned.\n * When the path has trailing platform separator(s), they are removed.\n * All paths are prefixed with the platform separator.\n *\n * @param p\n */\nexport function normalize(p: string): string {\n    p = _path.normalize(p);\n\n    if (p === \".\" || p === sep) return sep;\n    if (p.slice(0, 1) !== sep) p = sep + p;\n\n    return p.replace(REGEX_TRAILING_SLASH, \"\");\n}\n"],
  "mappings": "AACA;AAWA,MAAM,uBAAuB;AAKtB,kBAA0B,MAAM;AAKhC,YAAoB,MAAM;AAS1B,iBAAsD,MAAM;AAQ5D,gBAA0C,MAAM;AAOhD,aAA6C,MAAM;AAQnD,iBAAuD,MAAM;AAc7D,gBAAuD,MAAM;AAO7D;AACH,MAAI,MAAM,QAAQ;AAElB,SAAO,MAAM,MAAM,MAAM;AAAA;AAYtB;AACH,MAAI,MAAM,UAAU;AAEpB,MAAI,MAAM,OAAO,MAAM;AAAK,WAAO;AACnC,MAAI,EAAE,MAAM,GAAG,OAAO;AAAK,QAAI,MAAM;AAErC,SAAO,EAAE,QAAQ,sBAAsB;AAAA;",
  "names": []
}
