{
  "version": 3,
  "sources": ["../../../src/overlays/base_overlay.ts"],
  "sourcesContent": ["import {BaseAdapter} from \"../adapters/base_adapter\";\nimport {event} from \"../util/event\";\n\n/**\n * Represents the event details dispatched to subscribers via [[BaseOverlay.EVENT_MOUNTED]] / [[BaseOverlay.EVENT_UNMOUNTED]]\n */\ninterface IMountedEvent {\n    storage: BaseOverlay;\n}\n\n/**\n * Represents the base common API all URIStorage Overlays ad-here to\n */\nexport class BaseOverlay {\n    /**\n     * Event that dispatches whenever the Adapter is mounted\n     */\n    EVENT_MOUNTED = event<IMountedEvent>();\n\n    /**\n     * Event that dispatches whenever the Adapter is unmounted\n     */\n    EVENT_UNMOUNTED = event<IMountedEvent>();\n\n    /**\n     * Represents the Adapter configured to be overlaid\n     */\n    adapter: BaseAdapter;\n\n    constructor(adapter: BaseAdapter) {\n        this.adapter = adapter;\n\n        if (!this.has_feature(\"is_available\")) {\n            throw new Error(\n                \"bad dispatch to 'BaseOverlay' (adapter is not available in this context)\"\n            );\n        }\n\n        adapter.EVENT_MOUNTED.subscribe((event) => this.EVENT_MOUNTED.dispatch({storage: this}));\n        adapter.EVENT_UNMOUNTED.subscribe((event) =>\n            this.EVENT_UNMOUNTED.dispatch({storage: this})\n        );\n    }\n\n    /**\n     * Returns if the currently assigned feature flag is enabled on the configured adapter\n     * @param feature\n     */\n    has_feature(feature: string): boolean {\n        const constructor = this.adapter.constructor as typeof BaseAdapter;\n\n        // @ts-ignore\n        return constructor[feature];\n    }\n\n    /**\n     * Returns if the Overlay is currently mounted\n     *\n     * > **NOTE**: There is no base concept of \"mounting\", it could be establishing a connection to a FTP\n     * > server, mounting a local SQLite3 database, etc, etc\n     */\n    is_mounted(): boolean {\n        return this.adapter.is_mounted();\n    }\n\n    /**\n     * Mounts the Overlay if currently unmounted\n     *\n     * > **NOTE**: There is no base concept of \"mounting\", it could be establishing a connection to a FTP\n     * > server, mounting a local SQLite3 database, etc, etc\n     */\n    mount(): Promise<void> {\n        return this.adapter.mount();\n    }\n\n    /**\n     * Unmounts the Overlay if currently mounted\n     *\n     * > **NOTE**: There is no base concept of \"mounting\", it could be establishing a connection to a FTP\n     * > server, mounting a local SQLite3 database, etc, etc\n     */\n    unmount(): Promise<void> {\n        return this.adapter.unmount();\n    }\n}\n"],
  "mappings": "AACA;AADA;AAAA,EA6BI,YAAY;AAZZ,yBAAgB;AAKhB,2BAAkB;AAQd,SAAK,UAAU;AAEf,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MACN;AAAA;AAIR,YAAQ,cAAc,UAAU,YAAW,KAAK,cAAc,SAAS,CAAC,SAAS;AACjF,YAAQ,gBAAgB,UAAU,YAC9B,KAAK,gBAAgB,SAAS,CAAC,SAAS;AAAA;AAAA,EAQhD;AACI,wBAAoB,KAAK,QAAQ;AAGjC,WAAO,YAAY;AAAA;AAAA,EASvB;AACI,WAAO,KAAK,QAAQ;AAAA;AAAA,EASxB;AACI,WAAO,KAAK,QAAQ;AAAA;AAAA,EASxB;AACI,WAAO,KAAK,QAAQ;AAAA;AAAA;",
  "names": []
}
